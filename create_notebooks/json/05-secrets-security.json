{
  "title": "Exercise 05: Secrets and Security in GitHub Actions",
  "description": "In this notebook, we'll explore how to securely handle sensitive information in GitHub Actions using secrets and security best practices.",
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Exercise 05: Deployment\n",
        "\n",
        "In this exercise, you'll learn how to use GitHub Actions for automated deployment. You'll create a simple web application and set up workflows to deploy it to different environments based on various triggers."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Objectives\n",
        "\n",
        "- Understand deployment environments in GitHub Actions\n",
        "- Create environment-specific configurations\n",
        "- Set up deployment workflows with approvals\n",
        "- Implement rollback strategies\n",
        "- Use deployment protection rules"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Deployment in GitHub Actions\n",
        "\n",
        "GitHub Actions provides powerful deployment capabilities:\n",
        "\n",
        "1. **Environments**\n",
        "   - Define deployment targets (staging, production)\n",
        "   - Set environment-specific secrets\n",
        "   - Configure protection rules\n",
        "\n",
        "2. **Deployment Strategies**\n",
        "   - Continuous deployment\n",
        "   - Manual approvals\n",
        "   - Rollback procedures\n",
        "   - Deployment gates\n",
        "\n",
        "3. **Security Features**\n",
        "   - Environment protection rules\n",
        "   - Required reviewers\n",
        "   - Wait timer\n",
        "   - Branch policies"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Example Deployment Workflow"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "deployment_workflow = \"\"\"\n",
        "name: Deploy Application\n",
        "\n",
        "on:\n",
        "  push:\n",
        "    branches: [ main ]\n",
        "  workflow_dispatch:\n",
        "\n",
        "jobs:\n",
        "  deploy-staging:\n",
        "    runs-on: ubuntu-latest\n",
        "    environment: staging\n",
        "    \n",
        "    steps:\n",
        "      - uses: actions/checkout@v3\n",
        "      \n",
        "      - name: Set up Python\n",
        "        uses: actions/setup-python@v4\n",
        "        with:\n",
        "          python-version: '3.x'\n",
        "          \n",
        "      - name: Install dependencies\n",
        "        run: |\n",
        "          python -m pip install --upgrade pip\n",
        "          pip install -r requirements.txt\n",
        "          \n",
        "      - name: Run tests\n",
        "        run: python -m pytest\n",
        "        \n",
        "      - name: Build Docker image\n",
        "        run: docker build -t myapp:${{ github.sha }} .\n",
        "        \n",
        "      - name: Deploy to staging\n",
        "        run: |\n",
        "          echo \"Deploying to staging...\"\n",
        "          # Add deployment steps here\n",
        "          \n",
        "  deploy-production:\n",
        "    needs: deploy-staging\n",
        "    runs-on: ubuntu-latest\n",
        "    environment: production\n",
        "    \n",
        "    steps:\n",
        "      - uses: actions/checkout@v3\n",
        "      \n",
        "      - name: Deploy to production\n",
        "        run: |\n",
        "          echo \"Deploying to production...\"\n",
        "          # Add deployment steps here\n",
        "\"\"\"\n",
        "\n",
        "print(deployment_workflow)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Hands-on Exercise\n",
        "\n",
        "In this exercise, you'll create a web application and set up deployment workflows. Follow these steps:\n",
        "\n",
        "1. **Create a Simple Web Application**\n",
        "   - Create a Flask web application\n",
        "   - Add configuration for different environments\n",
        "   - Create tests for the application\n",
        "   - Set up Docker containerization\n",
        "\n",
        "2. **Set Up Deployment Environments**\n",
        "   - Create staging and production environments in GitHub\n",
        "   - Configure environment secrets\n",
        "   - Set up environment protection rules\n",
        "   - Configure deployment approvals\n",
        "\n",
        "3. **Create Deployment Workflows**\n",
        "   - Set up continuous deployment to staging\n",
        "   - Configure manual deployment to production\n",
        "   - Implement deployment gates and approvals\n",
        "   - Add rollback capabilities\n",
        "\n",
        "4. **Test the Deployment Process**\n",
        "   - Deploy to staging automatically\n",
        "   - Request and approve production deployment\n",
        "   - Test rollback procedures\n",
        "   - Monitor deployment status\n",
        "\n",
        "## Expected Outcome\n",
        "\n",
        "After completing this exercise, you should have:\n",
        "- A web application with automated deployment\n",
        "- Multiple deployment environments\n",
        "- Protected deployment workflows\n",
        "- Experience with deployment approvals and rollbacks\n",
        "\n",
        "## Next Steps\n",
        "\n",
        "Congratulations! You've completed all exercises in this GitHub Actions training. You should now have a good understanding of:\n",
        "- Basic workflows\n",
        "- Environment variables and secrets\n",
        "- Matrix builds\n",
        "- Artifacts\n",
        "- Deployment strategies\n",
        "\n",
        "Continue exploring GitHub Actions by:\n",
        "- Creating your own workflows\n",
        "- Contributing to open source projects\n",
        "- Automating your development processes\n",
        "- Implementing advanced CI/CD pipelines"
      ]
    }
  ]
} 