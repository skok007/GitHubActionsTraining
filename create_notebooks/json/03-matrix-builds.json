{
  "title": "Exercise 03: Matrix Builds in GitHub Actions",
  "description": "In this notebook, we'll explore how to use matrix builds to run jobs across multiple configurations.",
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Exercise 03: Matrix Builds in GitHub Actions\n",
        "\n",
        "In this notebook, we'll explore how to use matrix builds to run jobs across multiple configurations."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Prerequisites\n",
        "\n",
        "Before starting this exercise, ensure you have:\n",
        "\n",
        "1. **GitHub Account**\n",
        "   - A GitHub account with appropriate permissions\n",
        "   - A repository where you can create workflows\n",
        "   - Access to the repository's Settings and Actions tabs\n",
        "\n",
        "2. **Development Environment**\n",
        "   - Basic understanding of Git\n",
        "   - Text editor for editing YAML files\n",
        "   - Familiarity with command-line interfaces\n",
        "\n",
        "3. **Required Tools**\n",
        "   - Git installed and configured\n",
        "   - GitHub CLI (optional but recommended)\n",
        "   - Python 3.x (for the example project)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding Matrix Builds\n",
        "\n",
        "Matrix builds allow you to run a job multiple times with different configurations:\n",
        "\n",
        "1. **Basic Matrix**\n",
        "   - Define dimensions (e.g., os, node-version)\n",
        "   - Create combinations of values\n",
        "   - Run jobs for each combination\n",
        "\n",
        "2. **Matrix Strategies**\n",
        "   - Include specific combinations\n",
        "   - Exclude unwanted combinations\n",
        "   - Use dynamic matrix generation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Basic Matrix Configuration\n",
        "\n",
        "Here's how to set up a basic matrix build:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "basic_matrix = \"\"\"\n",
        "name: Matrix Build Example\n",
        "\n",
        "on: [push]\n",
        "\n",
        "jobs:\n",
        "  build:\n",
        "    runs-on: ubuntu-latest\n",
        "    strategy:\n",
        "      matrix:\n",
        "        os: [ubuntu-latest, windows-latest, macos-latest]\n",
        "        node-version: [14.x, 16.x, 18.x]\n",
        "    \n",
        "    steps:\n",
        "      - uses: actions/checkout@v3\n",
        "      - name: Use Node.js ${{ matrix.node-version }}\n",
        "        uses: actions/setup-node@v3\n",
        "        with:\n",
        "          node-version: ${{ matrix.node-version }}\n",
        "      - name: Run on ${{ matrix.os }}\n",
        "        run: node --version\n",
        "\"\"\"\n",
        "\n",
        "print(basic_matrix)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Advanced Matrix Features\n",
        "\n",
        "Let's explore some advanced matrix features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "advanced_matrix = \"\"\"\n",
        "name: Advanced Matrix Example\n",
        "\n",
        "on: [push]\n",
        "\n",
        "jobs:\n",
        "  build:\n",
        "    runs-on: ubuntu-latest\n",
        "    strategy:\n",
        "      matrix:\n",
        "        os: [ubuntu-latest, windows-latest]\n",
        "        node-version: [14.x, 16.x]\n",
        "        include:\n",
        "          - os: macos-latest\n",
        "            node-version: 18.x\n",
        "            experimental: true\n",
        "        exclude:\n",
        "          - os: windows-latest\n",
        "            node-version: 14.x\n",
        "      fail-fast: false\n",
        "    \n",
        "    steps:\n",
        "      - uses: actions/checkout@v3\n",
        "      - name: Setup Node.js\n",
        "        uses: actions/setup-node@v3\n",
        "        with:\n",
        "          node-version: ${{ matrix.node-version }}\n",
        "      - name: Run tests\n",
        "        run: |\n",
        "          echo \"Running on ${{ matrix.os }}\"\n",
        "          echo \"Node version: ${{ matrix.node-version }}\"\n",
        "          if [ \"${{ matrix.experimental }}\" = \"true\" ]; then\n",
        "            echo \"Running experimental features\"\n",
        "          fi\n",
        "\"\"\"\n",
        "\n",
        "print(advanced_matrix)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Best Practices\n",
        "\n",
        "When working with matrix builds, follow these best practices:\n",
        "\n",
        "1. **Optimize Job Execution**\n",
        "   - Use `fail-fast` appropriately\n",
        "   - Consider job dependencies\n",
        "   - Balance parallel execution\n",
        "\n",
        "2. **Matrix Design**\n",
        "   - Keep combinations manageable\n",
        "   - Use includes/excludes effectively\n",
        "   - Document matrix strategy\n",
        "\n",
        "3. **Resource Management**\n",
        "   - Monitor concurrent jobs\n",
        "   - Consider GitHub-hosted runner limits\n",
        "   - Optimize job duration\n",
        "\n",
        "4. **Testing Strategy**\n",
        "   - Test critical combinations first\n",
        "   - Use appropriate test coverage\n",
        "   - Handle test failures gracefully"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Further Considerations\n",
        "\n",
        "As you become more familiar with matrix builds, consider these advanced topics:\n",
        "\n",
        "1. **Dynamic Matrix Generation**\n",
        "   - Generate matrix from script output\n",
        "   - Use API data for matrix values\n",
        "   - Create conditional matrices\n",
        "\n",
        "2. **Matrix Optimization**\n",
        "   - Reduce redundant builds\n",
        "   - Use matrix filters\n",
        "   - Implement smart caching\n",
        "\n",
        "3. **Matrix Dependencies**\n",
        "   - Handle job dependencies\n",
        "   - Share artifacts between matrix jobs\n",
        "   - Coordinate matrix results\n",
        "\n",
        "4. **Matrix Debugging**\n",
        "   - Troubleshoot matrix failures\n",
        "   - Debug specific combinations\n",
        "   - Monitor matrix execution"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Hands-on Exercise\n",
        "\n",
        "Let's practice working with matrix builds:\n",
        "\n",
        "1. **Create Basic Matrix**\n",
        "   - Look at `.github/workflows/03-matrix-builds.yml`\n",
        "   - Understand the matrix structure\n",
        "   - Run the workflow\n",
        "\n",
        "2. **Add Matrix Features**\n",
        "   - Add include/exclude rules\n",
        "   - Implement fail-fast strategy\n",
        "   - Add conditional steps\n",
        "\n",
        "3. **Optimize Matrix**\n",
        "   - Reduce redundant combinations\n",
        "   - Implement smart caching\n",
        "   - Add job dependencies\n",
        "\n",
        "4. **Matrix Challenges**\n",
        "   - Generate dynamic matrix values\n",
        "   - Handle matrix failures\n",
        "   - Share data between matrix jobs\n",
        "   - Implement matrix-specific artifacts\n",
        "\n",
        "Remember to monitor your GitHub Actions minutes and optimize your matrix strategy!"
      ]
    }
  ]
} 