{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Exercise 01: Basic GitHub Actions Workflow\n",
        "\n",
        "In this exercise, you'll learn how to create your first GitHub Actions workflow. You'll create a simple Python application and set up a basic CI workflow that runs tests automatically when you push code."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Objectives\n",
        "\n",
        "- Create a basic Python application\n",
        "- Set up a GitHub Actions workflow\n",
        "- Learn about workflow triggers\n",
        "- Understand basic workflow syntax\n",
        "- Run tests automatically on push"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Prerequisites\n",
        "\n",
        "Before starting this exercise, ensure you have:\n",
        "\n",
        "1. **GitHub Account**\n",
        "   - A GitHub account with appropriate permissions\n",
        "   - A repository where you can create workflows\n",
        "   - Access to the repository's Settings and Actions tabs\n",
        "\n",
        "2. **Development Environment**\n",
        "   - Python 3.8 or higher\n",
        "   - Git installed and configured\n",
        "   - Text editor for editing YAML files\n",
        "   - Basic understanding of Git commands"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Understanding GitHub Actions\n",
        "\n",
        "GitHub Actions is a continuous integration and automation tool that allows you to:\n",
        "\n",
        "- Automate your software development workflows\n",
        "- Build, test, and deploy your code\n",
        "- Run tasks in response to events\n",
        "- Create custom workflows using YAML syntax\n",
        "\n",
        "Key components of GitHub Actions:\n",
        "\n",
        "1. **Events**\n",
        "   - Triggers that start the workflow (e.g., push, pull_request)\n",
        "   - Can be filtered by branches, paths, etc.\n",
        "   - Examples: push to main, pull request opened\n",
        "\n",
        "2. **Jobs**\n",
        "   - Units of work that run in parallel or sequentially\n",
        "   - Each job runs in a fresh instance of the virtual environment\n",
        "   - Can have dependencies on other jobs\n",
        "\n",
        "3. **Steps**\n",
        "   - Individual tasks within a job\n",
        "   - Can run commands or use actions\n",
        "   - Share data between steps\n",
        "\n",
        "4. **Actions**\n",
        "   - Reusable units of code\n",
        "   - Can be created by GitHub, the community, or you\n",
        "   - Accept inputs and produce outputs"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Basic Workflow Example\n",
        "\n",
        "Here's our workflow file that we'll use in this exercise:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "workflow = \"\"\"\n",
        "name: Basic Workflow\n",
        "\n",
        "on:\n",
        "  push:\n",
        "    branches: [ \"main\" ]\n",
        "  pull_request:\n",
        "    branches: [ \"main\" ]\n",
        "\n",
        "permissions:\n",
        "  contents: read\n",
        "\n",
        "jobs:\n",
        "  test:\n",
        "    runs-on: ubuntu-latest\n",
        "    \n",
        "    steps:\n",
        "      - uses: actions/checkout@v4\n",
        "      \n",
        "      - name: Set up Python\n",
        "        uses: actions/setup-python@v5\n",
        "        with:\n",
        "          python-version: '3.10'\n",
        "          cache: 'pip'\n",
        "          \n",
        "      - name: Install dependencies\n",
        "        run: |\n",
        "          python -m pip install --upgrade pip\n",
        "          pip install -r exercises/01-basic-workflow/requirements.txt\n",
        "          \n",
        "      - name: Run tests\n",
        "        run: |\n",
        "          cd exercises/01-basic-workflow\n",
        "          pytest test_calculator.py -v --cov=. --cov-report=xml\n",
        "\"\"\"\n",
        "\n",
        "print(workflow)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Hands-on Exercise\n",
        "\n",
        "Let's create a simple calculator application and set up a GitHub Actions workflow to test it automatically.\n",
        "\n",
        "1. **Create the Calculator Application**\n",
        "\n",
        "Create a file `calculator.py` with basic math functions:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "calculator_code = \"\"\"\n",
        "def add(a, b):\n",
        "    \"\"\"Add two numbers and return the result.\"\"\"\n",
        "    return a + b\n",
        "\n",
        "def subtract(a, b):\n",
        "    \"\"\"Subtract b from a and return the result.\"\"\"\n",
        "    return a - b\n",
        "\n",
        "def multiply(a, b):\n",
        "    \"\"\"Multiply two numbers and return the result.\"\"\"\n",
        "    return a * b\n",
        "\n",
        "def divide(a, b):\n",
        "    \"\"\"Divide a by b and return the result.\"\"\"\n",
        "    if b == 0:\n",
        "        raise ValueError(\"Cannot divide by zero\")\n",
        "    return a / b\n",
        "\"\"\"\n",
        "\n",
        "print(calculator_code)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "2. **Create Tests**\n",
        "\n",
        "Create a file `test_calculator.py` with test cases:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "test_code = \"\"\"\n",
        "import pytest\n",
        "from calculator import add, subtract, multiply, divide\n",
        "\n",
        "def test_add():\n",
        "    assert add(1, 2) == 3\n",
        "    assert add(-1, 1) == 0\n",
        "    assert add(-1, -1) == -2\n",
        "\n",
        "def test_subtract():\n",
        "    assert subtract(3, 2) == 1\n",
        "    assert subtract(1, 1) == 0\n",
        "    assert subtract(-1, -1) == 0\n",
        "\n",
        "def test_multiply():\n",
        "    assert multiply(2, 3) == 6\n",
        "    assert multiply(-2, 3) == -6\n",
        "    assert multiply(-2, -3) == 6\n",
        "\n",
        "def test_divide():\n",
        "    assert divide(6, 2) == 3\n",
        "    assert divide(5, 2) == 2.5\n",
        "    assert divide(-6, 2) == -3\n",
        "\n",
        "def test_divide_by_zero():\n",
        "    with pytest.raises(ValueError):\n",
        "        divide(1, 0)\n",
        "\"\"\"\n",
        "\n",
        "print(test_code)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "3. **Set Up Dependencies**\n",
        "\n",
        "Create a `requirements.txt` file:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "requirements = \"\"\"\n",
        "pytest==7.4.3\n",
        "pytest-cov==4.1.0\n",
        "\"\"\"\n",
        "\n",
        "print(requirements)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "4. **Create GitHub Actions Workflow**\n",
        "\n",
        "Create a file `.github/workflows/01-basic-workflow.yml` with the workflow configuration shown earlier.\n",
        "\n",
        "5. **Test Locally**\n",
        "\n",
        "Before pushing to GitHub, test locally:\n",
        "```bash\n",
        "# Create and activate virtual environment\n",
        "python -m venv venv\n",
        "source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n",
        "\n",
        "# Install dependencies\n",
        "pip install -r requirements.txt\n",
        "\n",
        "# Run tests\n",
        "pytest test_calculator.py -v\n",
        "```\n",
        "\n",
        "6. **Push to GitHub**\n",
        "\n",
        "```bash\n",
        "git add .\n",
        "git commit -m \"Add calculator with tests and GitHub Actions workflow\"\n",
        "git push\n",
        "```\n",
        "\n",
        "7. **Check GitHub Actions**\n",
        "\n",
        "Go to your repository's Actions tab to see your workflow running!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Expected Outcome\n",
        "\n",
        "After completing this exercise, you should have:\n",
        "- A working calculator application with tests\n",
        "- A GitHub Actions workflow that automatically runs tests\n",
        "- Understanding of basic GitHub Actions concepts\n",
        "- Experience with CI/CD automation\n",
        "\n",
        "## Next Steps\n",
        "\n",
        "Once you've completed this exercise, move on to Exercise 02 to learn about environment variables and secrets in GitHub Actions."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.10"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
} 