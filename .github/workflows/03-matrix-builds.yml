name: Matrix Builds Example

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-matrix:
    name: Test Matrix
    strategy:
      # Allow other jobs to continue if one fails
      fail-fast: false
      # Limit concurrent jobs
      max-parallel: 3
      matrix:
        # Test across Python versions and operating systems
        python-version: ['3.8', '3.9', '3.10']
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Add specific combinations with additional variables
        include:
          - python-version: '3.11'
            os: ubuntu-latest
            experimental: true
        # Exclude specific combinations
        exclude:
          - python-version: '3.8'
            os: windows-latest
    
    runs-on: ${{ matrix.os }}
    # Mark experimental combinations as allowed to fail
    continue-on-error: ${{ matrix.experimental || false }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run tests with pytest
      run: |
        pytest tests/ --cov=src/ --cov-report=xml
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.os }}-py${{ matrix.python-version }}
        path: coverage.xml
    
    - name: Print matrix information
      run: |
        echo "Running on ${{ matrix.os }} with Python ${{ matrix.python-version }}"
        echo "Job index: ${{ strategy.job-index }} of ${{ strategy.job-total }}"
        echo "Experimental: ${{ matrix.experimental || 'false' }}"

  dynamic-matrix:
    name: Dynamic Matrix Example
    needs: test-matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "matrix={\"include\":[
            {\"project\":\"frontend\",\"config\":\"prod\"},
            {\"project\":\"backend\",\"config\":\"dev\"},
            {\"project\":\"api\",\"config\":\"test\"}
          ]}" >> $GITHUB_OUTPUT

  process-results:
    name: Process Results
    needs: [test-matrix, dynamic-matrix]
    runs-on: ubuntu-latest
    steps:
      - name: Download all coverage reports
        uses: actions/download-artifact@v3
        with:
          path: coverage-reports
      
      - name: Process results
        run: |
          echo "Processing test results from matrix builds..."
          ls -R coverage-reports/
          echo "Dynamic matrix configuration:"
          echo '${{ needs.dynamic-matrix.outputs.matrix }}' 